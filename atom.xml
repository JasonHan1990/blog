<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JasonH&#39;s Blog</title>
  
  <subtitle>A passionate software engineer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jasonhan1990.github.io/"/>
  <updated>2018-09-18T23:39:29.035Z</updated>
  <id>https://jasonhan1990.github.io/</id>
  
  <author>
    <name>Juncheng Han</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS Animation - Understanding Transform</title>
    <link href="https://jasonhan1990.github.io/2018/09/18/ios-animation-3/"/>
    <id>https://jasonhan1990.github.io/2018/09/18/ios-animation-3/</id>
    <published>2018-09-18T23:31:01.000Z</published>
    <updated>2018-09-18T23:39:29.035Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Learning notes for book iOS Animations by Tutorials.</p></blockquote><p>The UIView transform property is of type CGAffineTransform, and is used to represent a two-dimensional rotation, scale, or translation. By changing it, you can rotate, scale or translate a view.<br><a id="more"></a><br>You can create a CGAffineTransform by these methods: </p><ul><li><code>CGAffineTransformMakeRotation(CGFloat angle)</code></li><li><code>CGAffineTransformMakeScale(CGFloat sx, CGFloat sy)</code></li><li><code>CGAffineTransformMakeTranslation(CGFloat tx, CGFloat ty)</code></li></ul><p>The rotation and scale transforms are fairly self-explanatory—they rotate and scale a vector respectively. A translation transform just adds the specified x and y values to the vector—so if the vector represents a point, it moves the point.</p><p>You can combine new transform to an existing CGAffineTransform by using these methods:</p><ul><li><code>CGAffineTransformRotate(CGAffineTransform t, CGFloat angle)</code></li><li><code>CGAffineTransformScale(CGAffineTransform t, CGFloat sx, CGFloat sy)</code></li><li><code>CGAffineTransformTranslate(CGAffineTransform t, CGFloat tx, CGFloat ty)</code></li></ul><p>or you can combine two existing CGAffineTransform into one by using:</p><ul><li><code>CGAffineTransformConcat(CGAffineTransform t1, CGAffineTransform t2);</code></li></ul><p>Let’s see how to do a cube transition with CGAffineTransform.<br><div class="figure center image" style="width:;"><img class="fig-img" src="c3-1.gif" alt="Image-1"><span class="caption">Image-1</span></div><br>Look at the image. It looks like a cube that rotates around its center to reveal the next message on its sides. In fact, there are only two labels. One is login page and another is signup page. Let’s break it down. Now we only take care of login page label. It looks like this:<br><div class="figure center image" style="width:;"><img class="fig-img" src="c3-2.gif" alt="Image-2"><span class="caption">Image-2</span></div><br>It is obvious that we scale the label on its Y-axis. So let’s scale it by using the following code:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signInLbl.transform = <span class="type">CGAffineTransformMakeScale</span>(<span class="number">1.0</span>, <span class="number">0.05</span>)</span><br></pre></td></tr></table></figure><p>As you can see, it scales the label on Y-axis from 1.0 to 0.05 (1.0 is the default). Let’s see the result:<br><div class="figure center image" style="width:;"><img class="fig-img" src="c3-3.gif" alt="Image-3"><span class="caption">Image-3</span></div><br>Well, looks like we still need do some thing. Here, the label just shrinks to the middle of Y-axis. Compared with our goal, it seems like that we need to move the shrinking destination down by half of label’s height. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newLabelOffset = <span class="keyword">self</span>.heading.frame.size.height / <span class="number">2.0</span></span><br><span class="line"><span class="type">CGAffineTransformMakeTranslation</span>(<span class="number">0.0</span>, newLabelOffset)</span><br></pre></td></tr></table></figure><p>Here I didn’t write down “signInLbl.transform =”, because we can’t separately do the transforms. What we need is to combine the two CGAffineTransforms:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signInLbl.transform = <span class="type">CGAffineTransformConcat</span>(<span class="type">CGAffineTransformMakeScale</span>(<span class="number">1.0</span>, <span class="number">0.05</span>), <span class="type">CGAffineTransformMakeTranslation</span>(<span class="number">0.0</span>, newLabelOffset))</span><br></pre></td></tr></table></figure><p>Now, We can get what we want for login page label.<br>The order of the transformations really matters the final results. If you change the sequence of scale and translate, you will get different results. The reason for this is that when you apply transforms sequentially in this way, the previous transforms affect the subsequent ones.<br>Let move on signup page label. It is easy now. The animation for signup page label is really like the reverse of signin page label animation. We first set its transform to:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signUpLbl.transform = <span class="type">CGAffineTransformConcat</span>(<span class="type">CGAffineTransformMakeScale</span>(<span class="number">1.0</span>, <span class="number">0.05</span>), <span class="type">CGAffineTransformMakeTranslation</span>(<span class="number">0.0</span>, -newLabelOffset))</span><br></pre></td></tr></table></figure><p>And then set it back to normal. What is normal? Apple offered us a transform: CGAffineTransformIdentity. It is like the identity matrix in linear algebra. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signUpLbl.transform = <span class="type">CGAffineTransformIdentity</span></span><br></pre></td></tr></table></figure><p>Okey, here is the full codes:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeHeadingText</span><span class="params">(label label: UILabel)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> label.text == <span class="string">"Login Page"</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.cubeTrasition(label: label, toText: <span class="string">"Signup Page"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.cubeTrasition(label: label, toText: <span class="string">"Signin Page"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cubeTrasition</span><span class="params">(label label: UILabel, toText: String)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> newLabel = <span class="type">UILabel</span>(frame: label.frame)</span><br><span class="line">    newLabel.text = toText</span><br><span class="line">    newLabel.font = label.font</span><br><span class="line">    newLabel.textAlignment = label.textAlignment</span><br><span class="line">    newLabel.textColor = label.textColor</span><br><span class="line">    newLabel.backgroundColor = <span class="type">UIColor</span>.clearColor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> newLabelOffset = label.frame.size.height / <span class="number">2.0</span></span><br><span class="line">    newLabel.transform = <span class="type">CGAffineTransformConcat</span>(</span><br><span class="line">    <span class="type">CGAffineTransformMakeScale</span>(<span class="number">1.0</span>, <span class="number">0.05</span>), <span class="type">CGAffineTransformMakeTranslation</span>(<span class="number">0.0</span>, -newLabelOffset))</span><br><span class="line"></span><br><span class="line">    label.superview!.addSubview(newLabel)</span><br><span class="line"> </span><br><span class="line">    <span class="type">UIView</span>.animateWithDuration(<span class="number">0.5</span>, delay: <span class="number">0.0</span>, options: .<span class="type">CurveEaseOut</span>, animations: &#123; </span><br><span class="line">        newLabel.transform = <span class="type">CGAffineTransformIdentity</span></span><br><span class="line">        label.transform = <span class="type">CGAffineTransformConcat</span>(<span class="type">CGAffineTransformMakeScale</span>(<span class="number">1.0</span>, <span class="number">0.05</span>), <span class="type">CGAffineTransformMakeTranslation</span>(<span class="number">0.0</span>, newLabelOffset))</span><br><span class="line">    &#125;, completion: &#123;<span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">        label.text = newLabel.text;</span><br><span class="line">        label.transform = <span class="type">CGAffineTransformIdentity</span></span><br><span class="line">        newLabel.removeFromSuperview()</span><br><span class="line">        <span class="keyword">self</span>.changeHeadingText(label: <span class="keyword">self</span>.heading)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Learning notes for book iOS Animations by Tutorials.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The UIView transform property is of type CGAffineTransform, and is used to represent a two-dimensional rotation, scale, or translation. By changing it, you can rotate, scale or translate a view.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/categories/iOS/"/>
    
    
      <category term="iOS Animation" scheme="https://jasonhan1990.github.io/tags/iOS-Animation/"/>
    
      <category term="Swift" scheme="https://jasonhan1990.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS Animation - UIView.TransitionWithView</title>
    <link href="https://jasonhan1990.github.io/2018/09/18/ios-animation-2/"/>
    <id>https://jasonhan1990.github.io/2018/09/18/ios-animation-2/</id>
    <published>2018-09-18T23:07:20.000Z</published>
    <updated>2018-09-18T23:10:50.367Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Learning notes for book iOS Animations by Tutorials.</p></blockquote><p>First, what is the difference between <code>transitionWithView</code> and <code>animationWithDuration</code>?<br><a id="more"></a><code>animateWithDuration</code> animates a UIView through changing its properties, whereas <code>transitionWithView</code> allows you to apply a transition to the specified view so that you can make state changes to it, such as add, remove, hide, show and replace one view with another view.</p><p>Then, here is an example. We added a hidden logging status view to the root view. After clicked the Login button, we show the status view. After 1.5 seconds, we hide the status view and refresh to the next status.<br><div class="figure center image" style="width:;"><img class="fig-img" src="C3.gif" alt="Image-1"><span class="caption">Image-1</span></div><br>The code looks like this:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">showMessage() &#123;</span><br><span class="line">    <span class="type">UIView</span>.transitionWithView(status, duration: <span class="number">0.33</span>, options: [.<span class="type">CurveEaseOut</span>, .<span class="type">TransitionCurlDown</span>], animations: &#123;</span><br><span class="line">        <span class="keyword">self</span>.status.hidden = <span class="literal">false</span></span><br><span class="line">    &#125;, completion: &#123;<span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">        delay(seconds: <span class="number">1.5</span>, completion: &#123;</span><br><span class="line">            <span class="keyword">self</span>.removeMessage()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">removeMessage() &#123;</span><br><span class="line">    <span class="type">UIView</span>.animateWithDuration(<span class="number">0.33</span>, delay: <span class="number">0.0</span>, options: [], animations: &#123; </span><br><span class="line">        <span class="keyword">self</span>.status.center.x += <span class="keyword">self</span>.view.frame.size.width</span><br><span class="line">    &#125;, completion: &#123;<span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">self</span>.status.hidden = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">self</span>.showNextMessage()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The first parameter in <code>transitionWithView()</code> is the container view that performs the transition (Here is the status view). The rest of parameters are quite similar to the <code>animateWithDuration()</code>.</p><p>Transition option:</p><ul><li>.TransitionFlipFromLeft</li><li>.TransitionFlipFromRight</li><li>.TransitionCurlUp</li><li>.TransitionCurlDown</li><li>.TransitionCrossDissolve</li><li>.TransitionFlipFromTop</li><li>.TransitionFlipFromBottom</li></ul><p>The original post is on May 25, 2016.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Learning notes for book iOS Animations by Tutorials.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First, what is the difference between &lt;code&gt;transitionWithView&lt;/code&gt; and &lt;code&gt;animationWithDuration&lt;/code&gt;?&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/categories/iOS/"/>
    
    
      <category term="iOS Animation" scheme="https://jasonhan1990.github.io/tags/iOS-Animation/"/>
    
      <category term="Swift" scheme="https://jasonhan1990.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS Animation - UIView.AnimationWithDurarion</title>
    <link href="https://jasonhan1990.github.io/2018/09/18/IOS-ANIMATION-1/"/>
    <id>https://jasonhan1990.github.io/2018/09/18/IOS-ANIMATION-1/</id>
    <published>2018-09-18T19:36:26.000Z</published>
    <updated>2018-09-18T22:59:20.346Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Learning notes for book iOS Animations by Tutorials.</p></blockquote><p>Logging page is very common in your mobile apps today. A fancy logging page will catch people’s eyes at the very beginning. Let’s do it.<br><a id="more"></a><br><strong>Shifting and Fade in:</strong><br><div class="figure center image" style="width:;"><img class="fig-img" src="C1.gif" alt="Image-1"><span class="caption">Image-1</span></div><br>The view contains: </p><ul><li>A heading Label shows login page</li><li>A Username textField</li><li>A Password textField</li><li>A Login button</li></ul><p>The animation shows that the label comes from left to right first, then follow by the username textField, and then follow by the password textField. The log in button starts to fade in when the password textField starts to come in. The password textField and the login button finish their animation at the same time.</p><p>So, what we need to do first is to hide all the components before view starts to appear. In <code>viewWillAppear()</code>, we do:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// move the following components out of the screen </span></span><br><span class="line">heading.center.x -= view.bounds.width</span><br><span class="line">username.center.x -= view.bounds.width</span><br><span class="line">password.center.x -= veiw.bounds.width</span><br><span class="line"><span class="comment">// set login button transparent</span></span><br><span class="line">loginButton.alpha = <span class="number">0.0</span></span><br></pre></td></tr></table></figure><p>After we done in <code>viewWillAppear()</code>, we start to write down the animation code in <code>viewDidAppear()</code>, which will show animation before the view fully loaded. Here we will use UIView class method “animateWithDuration”. In <code>viewDidAppear()</code>, we do:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.heading.center.x += <span class="keyword">self</span>.view.bounds.width;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.4</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.username.center.x += <span class="keyword">self</span>.view.bounds.width;</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.8</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.password.center.x += <span class="keyword">self</span>.view.bounds.width;</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.8</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.loginButton.alpha += <span class="number">1.0</span></span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure></p><p>In the class method, it has some parameters to let you customize your animation:</p><ul><li>duration: The duration of the animation.</li><li>delay: A number of seconds UIKit will wait before it starts the animation.</li><li>option: A set of animation options allowing you to customize a number of aspects of your animation. (Default: CurveEaseInOut)</li><li>animation: The closure expression to provide your animation.</li><li>completion: The code needs to be executed after the animation completes. It could be nil.</li></ul><p><strong>Spring</strong><br><div class="figure center image" style="width:;"><img class="fig-img" src="C2.gif" alt="Image-2"><span class="caption">Image-2</span></div><br>Spring is easy. We still use the same class method from UIView animateWithDuration but with different parameters. Codes in <code>viewDidAppear()</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.4</span>, usingSpringWithDamping: <span class="number">0.7</span>, initialSpringVelocity: <span class="number">0.0</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.username.center.x += <span class="keyword">self</span>.view.bounds.width;</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.4</span>, usingSpringWithDamping: <span class="number">0.7</span>, initialSpringVelocity: <span class="number">0.0</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.password.center.x += <span class="keyword">self</span>.view.bounds.width;</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.4</span>, usingSpringWithDamping: <span class="number">0.4</span>, initialSpringVelocity: <span class="number">0.0</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.loginButton.center.y += <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">self</span>.loginButton.bounds.size.width += <span class="number">30</span></span><br><span class="line">    <span class="keyword">self</span>.loginButton.alpha += <span class="number">1</span>;</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>The new parameters are:</p><ol><li>usingSpringWithDamping: You can think of this value as the “stiffness” of the spring.</li><li>initialSpringVelocity: This controls the initial velocity of the animation.</li></ol><p>The method animateWithDuration allows you to animate the following properties of a UIView:</p><ul><li>frame</li><li>bounds</li><li>center</li><li>transform</li><li>alpha</li><li>background</li><li>contentStretch</li></ul><p>The original post is on May 24, 2016.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Learning notes for book iOS Animations by Tutorials.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Logging page is very common in your mobile apps today. A fancy logging page will catch people’s eyes at the very beginning. Let’s do it.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/categories/iOS/"/>
    
    
      <category term="iOS Animation" scheme="https://jasonhan1990.github.io/tags/iOS-Animation/"/>
    
      <category term="Swift" scheme="https://jasonhan1990.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Blog moving notice</title>
    <link href="https://jasonhan1990.github.io/2018/09/17/blog-moving-notice/"/>
    <id>https://jasonhan1990.github.io/2018/09/17/blog-moving-notice/</id>
    <published>2018-09-18T02:36:10.000Z</published>
    <updated>2018-09-18T20:49:59.842Z</updated>
    
    <content type="html"><![CDATA[<p>I am starting to move my previous blog and project page from Squrespace to Github page starting today. After finishing moving, I will link my personal domain <a href="http://www.junchenghan.com" target="_blank" rel="noopener">www.junchenghan.com</a> to this Github page.</p><p>Thanks.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I am starting to move my previous blog and project page from Squrespace to Github page starting today. After finishing moving, I will lin
      
    
    </summary>
    
      <category term="Other" scheme="https://jasonhan1990.github.io/categories/Other/"/>
    
    
      <category term="Other" scheme="https://jasonhan1990.github.io/tags/Other/"/>
    
  </entry>
  
</feed>
