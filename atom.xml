<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JasonH&#39;s Blog</title>
  
  <subtitle>A passionate software engineer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jasonhan1990.github.io/"/>
  <updated>2018-09-18T22:45:57.922Z</updated>
  <id>https://jasonhan1990.github.io/</id>
  
  <author>
    <name>Juncheng Han</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS Animation - UIView.AnimationWithDurarion</title>
    <link href="https://jasonhan1990.github.io/2018/09/18/IOS-ANIMATION-1/"/>
    <id>https://jasonhan1990.github.io/2018/09/18/IOS-ANIMATION-1/</id>
    <published>2018-09-18T19:36:26.000Z</published>
    <updated>2018-09-18T22:45:57.922Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Learning notes for book iOS Animations by Tutorials.</p></blockquote><p>Logging page is very common in your mobile apps today. A fancy logging page will catch people’s eyes at the very beginning. Let’s do it.<br><a id="more"></a><br><strong>Shifting and Fade in:</strong><br><div class="figure center image" style="width:;"><img class="fig-img" src="C1.gif" alt="Image-1"><span class="caption">Image-1</span></div><br>The view contains: </p><ul><li>A heading Label shows login page</li><li>A Username textField</li><li>A Password textField</li><li>A Login button</li></ul><p>The animation shows that the label comes from left to right first, then follow by the username textField, and then follow by the password textField. The log in button starts to fade in when the password textField starts to come in. The password textField and the login button finish their animation at the same time.</p><p>So, what we need to do first is to hide all the components before view starts to appear. In <code>viewWillAppear()</code>, we do:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// move the following components out of the screen </span></span><br><span class="line">heading.center.x -= view.bounds.width</span><br><span class="line">username.center.x -= view.bounds.width</span><br><span class="line">password.center.x -= veiw.bounds.width</span><br><span class="line"><span class="comment">// set login button transparent</span></span><br><span class="line">loginButton.alpha = <span class="number">0.0</span></span><br></pre></td></tr></table></figure><p>After we done in <code>viewWillAppear()</code>, we start to write down the animation code in <code>viewDidAppear()</code>, which will show animation before the view fully loaded. Here we will use UIView class method “animateWithDuration”. In <code>viewDidAppear()</code>, we do:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.heading.center.x += <span class="keyword">self</span>.view.bounds.width;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.4</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.username.center.x += <span class="keyword">self</span>.view.bounds.width;</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.8</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.password.center.x += <span class="keyword">self</span>.view.bounds.width;</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.8</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.loginButton.alpha += <span class="number">1.0</span></span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure></p><p>In the class method, it has some parameters to let you customize your animation:</p><ul><li>duration: The duration of the animation.</li><li>delay: A number of seconds UIKit will wait before it starts the animation.</li><li>option: A set of animation options allowing you to customize a number of aspects of your animation. (Default: CurveEaseInOut)</li><li>animation: The closure expression to provide your animation.</li><li>completion: The code needs to be executed after the animation completes. It could be nil.</li></ul><p><strong>Spring</strong><br><div class="figure center image" style="width:;"><img class="fig-img" src="C2.gif" alt="Image-2"><span class="caption">Image-2</span></div><br>Spring is easy. We still use the same class method from UIView animateWithDuration but with different parameters. Codes in <code>viewDidAppear()</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.4</span>, usingSpringWithDamping: <span class="number">0.7</span>, initialSpringVelocity: <span class="number">0.0</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.username.center.x += <span class="keyword">self</span>.view.bounds.width;</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.4</span>, usingSpringWithDamping: <span class="number">0.7</span>, initialSpringVelocity: <span class="number">0.0</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.password.center.x += <span class="keyword">self</span>.view.bounds.width;</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.4</span>, usingSpringWithDamping: <span class="number">0.4</span>, initialSpringVelocity: <span class="number">0.0</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.loginButton.center.y += <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">self</span>.loginButton.bounds.size.width += <span class="number">30</span></span><br><span class="line">    <span class="keyword">self</span>.loginButton.alpha += <span class="number">1</span>;</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>The new parameters are:</p><ol><li>usingSpringWithDamping: You can think of this value as the “stiffness” of the spring.</li><li>initialSpringVelocity: This controls the initial velocity of the animation.</li></ol><p>The method animateWithDuration allows you to animate the following properties of a UIView:</p><ul><li>frame</li><li>bounds</li><li>center</li><li>transform</li><li>alpha</li><li>background</li><li>contentStretch</li></ul><p>The original post is on May 24, 2016.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Learning notes for book iOS Animations by Tutorials.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Logging page is very common in your mobile apps today. A fancy logging page will catch people’s eyes at the very beginning. Let’s do it.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/categories/iOS/"/>
    
    
      <category term="iOS Animation" scheme="https://jasonhan1990.github.io/tags/iOS-Animation/"/>
    
      <category term="Swift" scheme="https://jasonhan1990.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Blog moving notice</title>
    <link href="https://jasonhan1990.github.io/2018/09/17/blog-moving-notice/"/>
    <id>https://jasonhan1990.github.io/2018/09/17/blog-moving-notice/</id>
    <published>2018-09-18T02:36:10.000Z</published>
    <updated>2018-09-18T20:49:59.842Z</updated>
    
    <content type="html"><![CDATA[<p>I am starting to move my previous blog and project page from Squrespace to Github page starting today. After finishing moving, I will link my personal domain <a href="http://www.junchenghan.com" target="_blank" rel="noopener">www.junchenghan.com</a> to this Github page.</p><p>Thanks.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I am starting to move my previous blog and project page from Squrespace to Github page starting today. After finishing moving, I will lin
      
    
    </summary>
    
      <category term="Other" scheme="https://jasonhan1990.github.io/categories/Other/"/>
    
    
      <category term="Other" scheme="https://jasonhan1990.github.io/tags/Other/"/>
    
  </entry>
  
</feed>
