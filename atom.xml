<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JasonH&#39;s Blog</title>
  
  <subtitle>A passionate software engineer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jasonhan1990.github.io/"/>
  <updated>2018-09-20T06:51:36.363Z</updated>
  <id>https://jasonhan1990.github.io/</id>
  
  <author>
    <name>Juncheng Han</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Blog moving notice</title>
    <link href="https://jasonhan1990.github.io/2018/09/17/blog-moving-notice/"/>
    <id>https://jasonhan1990.github.io/2018/09/17/blog-moving-notice/</id>
    <published>2018-09-18T02:36:10.000Z</published>
    <updated>2018-09-20T06:51:36.363Z</updated>
    
    <content type="html"><![CDATA[<p>I am starting to move my previous blog and project page from Squrespace to Github page starting today. After finishing moving, I will link my personal domain <a href="http://www.junchenghan.com" target="_blank" rel="noopener">www.junchenghan.com</a> to this Github page.</p><p>Thanks.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I am starting to move my previous blog and project page from Squrespace to Github page starting today. After finishing moving, I will lin
      
    
    </summary>
    
      <category term="Other" scheme="https://jasonhan1990.github.io/categories/Other/"/>
    
    
      <category term="Other" scheme="https://jasonhan1990.github.io/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>Create Thumbnail For Video</title>
    <link href="https://jasonhan1990.github.io/2016/11/08/create-thumbnail-for-video/"/>
    <id>https://jasonhan1990.github.io/2016/11/08/create-thumbnail-for-video/</id>
    <published>2016-11-09T00:18:05.000Z</published>
    <updated>2018-09-21T00:23:58.835Z</updated>
    
    <content type="html"><![CDATA[<p>Here is how to create thumbnail for videos. Two steps:<br><a id="more"></a></p><ol><li>Use <code>AVURLAsset</code> to access to the video file by URL. Then use <code>AVAssetImageGenerator</code> to generate an image of one frame.</li><li>To distinguish the image we generated from normal images, add a play icon on the top of the image by merging two UIImage .</li></ol><p>Code:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">UIImage</span> *)createVideoThumbnailWithPath:(<span class="built_in">NSString</span> *)videoPath &#123;</span><br><span class="line">    <span class="keyword">if</span> (!videoPath)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AVURLAsset</span> *asset = [[<span class="built_in">AVURLAsset</span> alloc] initWithURL:[<span class="built_in">NSURL</span> fileURLWithPath:videoPath] options:<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">AVAssetImageGenerator</span> *imgGenerator = [[<span class="built_in">AVAssetImageGenerator</span> alloc] initWithAsset:asset];</span><br><span class="line">    imgGenerator.appliesPreferredTrackTransform = <span class="literal">YES</span>;</span><br><span class="line">    imgGenerator.apertureMode = <span class="built_in">AVAssetImageGeneratorApertureModeEncodedPixels</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create CGImage</span></span><br><span class="line">    <span class="built_in">CGImageRef</span> thumbnailImgRef = <span class="literal">nil</span>;</span><br><span class="line">    <span class="comment">// the time frame</span></span><br><span class="line">    <span class="built_in">CFTimeInterval</span> thumbnailImageTime = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get the image</span></span><br><span class="line">    thumbnailImgRef = [imgGenerator copyCGImageAtTime:<span class="built_in">CMTimeMake</span>(thumbnailImageTime, <span class="number">60</span>) actualTime:<span class="literal">nil</span> error:&amp;error];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// error handling</span></span><br><span class="line">    <span class="keyword">if</span> (!thumbnailImgRef)</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"VIDEO THUMBNAIL ERROR: %@"</span>, error);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// convert to UIImage</span></span><br><span class="line">    <span class="built_in">UIImage</span> *image = thumbnailImgRef ? [[<span class="built_in">UIImage</span> alloc] initWithCGImage:thumbnailImgRef] : <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add playIcon</span></span><br><span class="line">    <span class="keyword">if</span> (image) &#123;</span><br><span class="line">        <span class="comment">// grab your play icon</span></span><br><span class="line">        <span class="built_in">UIImage</span> *playIcon = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"PlayIcon"</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// start image context</span></span><br><span class="line">        <span class="built_in">UIGraphicsBeginImageContext</span>(image.size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add original image first with existing opacity</span></span><br><span class="line">        [image drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>,<span class="number">0</span>,image.size.width,image.size.height)];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add play icon over the image in the middle with supplied opacity if applicable</span></span><br><span class="line">        [playIcon drawInRect:<span class="built_in">CGRectMake</span>((image.size.width - playIcon.size.width) / <span class="number">2.0</span>,</span><br><span class="line">                                        (image.size.height - playIcon.size.height) / <span class="number">2.0</span>,</span><br><span class="line">                                        playIcon.size.width,playIcon.size.height)</span><br><span class="line">                   blendMode:kCGBlendModeNormal</span><br><span class="line">                       alpha:<span class="number">0.9</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get merged image</span></span><br><span class="line">        <span class="built_in">UIImage</span> *newImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newImage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Here is how to create thumbnail for videos. Two steps:&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/tags/iOS/"/>
    
      <category term="Objc" scheme="https://jasonhan1990.github.io/tags/Objc/"/>
    
      <category term="Code Snippet" scheme="https://jasonhan1990.github.io/tags/Code-Snippet/"/>
    
  </entry>
  
  <entry>
    <title>Error: Cannot Assign To &#39;self&#39; Outside Of A Method In The Init Family</title>
    <link href="https://jasonhan1990.github.io/2016/11/03/error-record-1/"/>
    <id>https://jasonhan1990.github.io/2016/11/03/error-record-1/</id>
    <published>2016-11-03T22:37:06.000Z</published>
    <updated>2018-09-21T00:23:37.317Z</updated>
    
    <content type="html"><![CDATA[<p>I got this error because I mistyped the <strong>Link</strong> to <strong>link</strong>.<br><a id="more"></a><br><div class="figure center" style="width:;"><a class="fancybox" href="e1-1.png" title="" data-caption="" data-fancybox="default"><img class="fig-img" src="e1-1.png" alt=""></a></div></p><p>So two rules that Xcode determine a method is an init method:</p><ol><li>return <code>instancetype</code> or <code>id</code></li><li>the method name should be a capital letter followed by <code>init</code>. </li></ol><p>For example:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (intancetype)initWithImage:(<span class="built_in">UIImage</span> *)image;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I got this error because I mistyped the &lt;strong&gt;Link&lt;/strong&gt; to &lt;strong&gt;link&lt;/strong&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/tags/iOS/"/>
    
      <category term="Error" scheme="https://jasonhan1990.github.io/tags/Error/"/>
    
      <category term="Objc" scheme="https://jasonhan1990.github.io/tags/Objc/"/>
    
  </entry>
  
  <entry>
    <title>GCD Note 2</title>
    <link href="https://jasonhan1990.github.io/2016/10/31/gcd-note-2/"/>
    <id>https://jasonhan1990.github.io/2016/10/31/gcd-note-2/</id>
    <published>2016-10-31T22:14:07.000Z</published>
    <updated>2018-09-21T00:22:35.135Z</updated>
    
    <content type="html"><![CDATA[<p>Continue after <a href="/2018/09/19/gcd-note-1">GCD Note 1</a>.<br><a id="more"></a></p><h2 id="dispatch-after"><a href="#dispatch-after" class="headerlink" title="dispatch_after"></a>dispatch_after</h2><p>The method dispatch_after works like a delayed dispatch_async. The dispatch_after() function submits the block to the given queue at the time specified by the when parameter.</p><p>Example:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dispatch_time_t delay = dispatch_time(DISPATCH_TIME_NOW, <span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>);</span><br><span class="line">dispatch_after(delay, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">   <span class="comment">//do something on main thread after 2 sec</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="dispatch-group"><a href="#dispatch-group" class="headerlink" title="dispatch group"></a>dispatch group</h2><p>Dispatch group is used to do some updates after a group of tasks. The tasks in the group can be either asynchronous or synchronous. To create a group:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch_group_t group = dispatch_group_create();</span><br></pre></td></tr></table></figure><p>There are two ways to add tasks to the group. The first way is adding a block of code to the group, and executing on a specified queue like globe queue:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dispatch_group_async(group,specifiedQueue,^&#123;</span><br><span class="line">    <span class="comment">// do something 1 here</span></span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(group,specifiedQueue,^&#123;</span><br><span class="line">    <span class="comment">// do something 2 here</span></span><br><span class="line">&#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>But this is not suitable for something you want to have callback straight away. </p><p>The second way is to set starting and ending manually by using <code>dispatch_group_enter()</code> and <code>dispatch_group_leaving()</code>.</p><p>Suppose we need to download an image with its thumbnail and the original image from a server with different URLs.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">dispatch_group_t group = dispatch_group_create();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">NSURL</span> *url;</span><br><span class="line">    <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">              url = [<span class="built_in">NSURL</span> URLWithString:thumbnailURLString];</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              url = [<span class="built_in">NSURL</span> URLWithString:orignalURLString];</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    dispatch_group_enter(group);</span><br><span class="line">    <span class="built_in">UIImage</span> *image = [ImageDownloader alloc] initWithURL: url withCompletion:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            <span class="comment">// handle the error</span></span><br><span class="line">        &#125;</span><br><span class="line">        dispatch_grounp_leave(group);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// store the images some where</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice that the number of enter should be equal to the number of leave. </p><p>Then, how to notify that the group is finished. There are also two ways. First one, using <code>dispatch_group_wait()</code>.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout);</span><br><span class="line"><span class="comment">// do something after group is finished</span></span><br></pre></td></tr></table></figure><p>This method will return a long value if the time expired before all tasks are finished, and it will block the current thread.</p><p>The second way is to use <code>dispatch_group_notify()</code>:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dispatch_group_notify(dispatch_group_t group, specifiedQueue,^&#123;</span><br><span class="line">    <span class="comment">// do something here on the specifiedQueue</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The <code>dispatch_group_notify()</code> function provides asynchronous notification of the completion of the blocks associated with the group by submitting the block to the specified queue once all blocks associated with the group have completed.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Continue after &lt;a href=&quot;/2018/09/19/gcd-note-1&quot;&gt;GCD Note 1&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/tags/iOS/"/>
    
      <category term="Objc" scheme="https://jasonhan1990.github.io/tags/Objc/"/>
    
      <category term="GCD" scheme="https://jasonhan1990.github.io/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>Why strongSelf and weakSelf?</title>
    <link href="https://jasonhan1990.github.io/2016/10/25/strong-weak-self/"/>
    <id>https://jasonhan1990.github.io/2016/10/25/strong-weak-self/</id>
    <published>2016-10-26T02:51:16.000Z</published>
    <updated>2018-09-21T00:20:19.677Z</updated>
    
    <content type="html"><![CDATA[<p>Before talking about strongSelf and weakSelf, I need briefly explain retain cycle.<br><a id="more"></a><br>So, a retain cycle usually occurs when an object A has a strong reference to Object B, and Object B also has a strong reference to Object A. Under this situation, the retainCount for both objects can not be 0, so the memory for these two objects won’t be released. This is the memory leak. The retain cycle could happen between multiple objects as long as their references between each other form a cycle.<br><div class="figure center" style="width:;"><a class="fancybox" href="strong-weak-self-1.png" title="Retain cycle 1" data-caption="Retain cycle 1" data-fancybox="default"><img class="fig-img" src="strong-weak-self-1.png" alt="Retain cycle 1"></a><span class="caption">Retain cycle 1</span></div><br>Also, an object can have a reference of itself which will cause retain cycle too. The most common situation is that an object owns a block, and in the block, we call any of this object’s methods or properties. Then the block has a reference to this object itself, which cause a retain cycle. Notice that blocks maintain strong references to any captured objects, including self, because they don’t want data be destroyed by ARC before themselves getting executed.<br><div class="figure center" style="width:;"><a class="fancybox" href="strong-weak-self-2.png" title="Retain cycle 2" data-caption="Retain cycle 2" data-fancybox="default"><img class="fig-img" src="strong-weak-self-2.png" alt="Retain cycle 2"></a><span class="caption">Retain cycle 2</span></div></p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h4><p>I have an object called Car. Car has a block called drive.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// car.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^Drive)();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Car</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *miles;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) Drive drive;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>In the viewController.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    Car *car = [[Car alloc]init];</span><br><span class="line">    car.miles = <span class="string">@"100 miles"</span>;</span><br><span class="line"></span><br><span class="line">    car.drive = ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Car drived %@"</span>, car.miles);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    car.drive();</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"return"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>Leak! Here, the car has a strong reference to the drive block, and in the block, the block has a strong reference to the car since we called car.miles. This made the car has a reference to itself.</p><p>Using Instruments to detect the leak. Click the red cross. Malloc 48 Bytes means the system allocate 48 Bytes of memory to the block.</p><div class="figure center" style="width:;"><a class="fancybox" href="strong-weak-self-3.png" title="" data-caption="" data-fancybox="default"><img class="fig-img" src="strong-weak-self-3.png" alt=""></a></div><p>Open Cycles &amp; Roots. You can see the cycle.</p><div class="figure center" style="width:;"><a class="fancybox" href="strong-weak-self-4.png" title="no ivar: Instruments can't find the variable name that allocated the memory so you get the [no ivar] message." data-caption="no ivar: Instruments can't find the variable name that allocated the memory so you get the [no ivar] message." data-fancybox="default"><img class="fig-img" src="strong-weak-self-4.png" alt="no ivar: Instruments can't find the variable name that allocated the memory so you get the [no ivar] message."></a><span class="caption">no ivar: Instruments can't find the variable name that allocated the memory so you get the [no ivar] message.</span></div><p>Change the Example 1 to Example 2.</p><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h4><p>I pass a parameter into the block. Leak?</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    Car *car = [[Car alloc]init];</span><br><span class="line">    car.miles = <span class="string">@"100 miles"</span>;</span><br><span class="line"></span><br><span class="line">    car.drive = ^(<span class="built_in">NSString</span> *miles)&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Car drived %@"</span>, miles);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    car.drive(car.miles);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"return"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>No Leak. Checking the leak with instruments:</p><div class="figure center" style="width:;"><a class="fancybox" href="strong-weak-self-5.png" title="" data-caption="" data-fancybox="default"><img class="fig-img" src="strong-weak-self-5.png" alt=""></a></div><p>Since I pass the car.miles into the block as a parameter, and the block won’t retain the parameter, there will be no retain cycle.</p><h3 id="WEAKSELF-AND-STRONGSELF"><a href="#WEAKSELF-AND-STRONGSELF" class="headerlink" title="WEAKSELF AND STRONGSELF"></a>WEAKSELF AND STRONGSELF</h3><h4 id="weakSelf"><a href="#weakSelf" class="headerlink" title="weakSelf"></a>weakSelf</h4><p>How to create a weakSelf? There are two ways.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__<span class="keyword">weak</span> __<span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>; </span><br><span class="line"><span class="comment">// Write this code every time before you use weakself.</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define WEAKSELF typeof(self) __ weak weakSelf = self  </span></span><br><span class="line"><span class="comment">// Or create a macro in header file, then you can use WEAKSELF everywhere.</span></span><br></pre></td></tr></table></figure><p>The reason we use weakSelf in a block is that with weak property, the block won’t retain the object in the block. Then we break the cycle. For example 1, we can use weakself to solve the retain cycle problem.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    Car *car = [[Car alloc]init];</span><br><span class="line">    car.miles = <span class="string">@"100 miles"</span>;</span><br><span class="line"></span><br><span class="line">    __<span class="keyword">weak</span> __<span class="keyword">typeof</span>(car) weakCar = car;</span><br><span class="line">    car.drive = ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Car drived %@"</span>, weakCar.miles);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    car.drive();</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"return"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h4 id="strongSelf"><a href="#strongSelf" class="headerlink" title="strongSelf"></a>strongSelf</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__<span class="keyword">strong</span> __<span class="keyword">typeof</span>(weakSelf) strongSelf = weakSelf;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define STRONGSELF typeof(weakSelf) __strong strongSelf = weakSelf</span></span><br></pre></td></tr></table></figure><p>Since we use weakSelf in the block to prevent the retain cycle problem, there is a potential problem that the object could be released before the block has been executed. </p><h4 id="example-3"><a href="#example-3" class="headerlink" title="example 3:"></a>example 3:</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    Car *car = [[Car alloc]init];</span><br><span class="line">    car.miles = <span class="string">@"100 miles"</span>;</span><br><span class="line"></span><br><span class="line">    __<span class="keyword">weak</span> __<span class="keyword">typeof</span>(car) weakCar = car;</span><br><span class="line">    car.drive = ^&#123;</span><br><span class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2.0</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Car drived %@"</span>, weakCar.miles);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    car.drive();</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"return"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>I add a delay before executing the NSlog(). Then the output is:<br><code>... 15:28:20.875923 BlockTest[7630:4429580] return... 15:28:23.065725 BlockTest[7630:4429580] Car drived (null)</code></p><p>What is happening here? The dispatch_after() function submits the block (which contains NSLog()) to the given queue (Here is the main queue) at the time specified by the when (Here is after 2 sec) parameter. Think the block as a task. The dispatch_after() asynchronously add the task to the main queue after two sec when you execute the study block. Since the study block has a weak reference to the car, after the study block has been execute (car.drive() is called), the weakCar is released by ARC, then the weak object will be set as nil. However, the dispatch block is still not executed. That is why we got null in the output.</p><p>So, we add strongSelf in the block which prevent the object will not be released inside the block. After the block is executed, strongSelf then release.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Car.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    Car *car = [[Car alloc]init];</span><br><span class="line">    car.miles = <span class="string">@"100 miles"</span>;</span><br><span class="line"></span><br><span class="line">    __<span class="keyword">weak</span> __<span class="keyword">typeof</span>(car) weakCar = car;</span><br><span class="line">    car.drive = ^&#123;</span><br><span class="line">        __<span class="keyword">strong</span> __<span class="keyword">typeof</span>(weakCar) strongCar = weakCar;</span><br><span class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2.0</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Car drived %@"</span>, strongCar.miles);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    car.drive();</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"return"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Before talking about strongSelf and weakSelf, I need briefly explain retain cycle.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/categories/iOS/"/>
    
    
      <category term="iOS Animation" scheme="https://jasonhan1990.github.io/tags/iOS-Animation/"/>
    
      <category term="Objc" scheme="https://jasonhan1990.github.io/tags/Objc/"/>
    
      <category term="Memory Leak" scheme="https://jasonhan1990.github.io/tags/Memory-Leak/"/>
    
      <category term="Retain Cycle" scheme="https://jasonhan1990.github.io/tags/Retain-Cycle/"/>
    
  </entry>
  
  <entry>
    <title>GCD Note 1</title>
    <link href="https://jasonhan1990.github.io/2016/10/19/gcd-note-1/"/>
    <id>https://jasonhan1990.github.io/2016/10/19/gcd-note-1/</id>
    <published>2016-10-19T23:40:56.000Z</published>
    <updated>2018-09-21T00:23:13.582Z</updated>
    
    <content type="html"><![CDATA[<p>GCD is the short form of Grand Central Dispatch. To understand GCD, there are several concepts needed to be known.<br><a id="more"></a></p><h2 id="Task"><a href="#Task" class="headerlink" title="Task:"></a>Task:</h2><p>Task is a relatively abstract concept. It could be an operation, a function or a method. In most cases, we can consider a task to be a block(or closure in Swift). </p><h2 id="QUEUE"><a href="#QUEUE" class="headerlink" title="QUEUE:"></a>QUEUE:</h2><p>Queues are provided bt GCD to handle submitted tasks in FIFO order.</p><p>There are two kinds of queues:</p><ol><li>Serial Queue: execute tasks one at a time in the current thread, each task starting only after the preceding task has finished. This makes sure that no critical section happens.</li><li>Concurrent Queue: execute tasks in multiple threads but still start in FIFO order. It is up tp GCD to determine whether one of the tasks should run on a different core.</li></ol><p>How to create a queue:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parameter 1: the name of the queue</span></span><br><span class="line"><span class="comment">// parameter 2: </span></span><br><span class="line"><span class="comment">// type of the queue: </span></span><br><span class="line"><span class="comment">// DISPATCH_QUEUE_SERIAL/NULL means serial queue，</span></span><br><span class="line"><span class="comment">// DISPATCH_QUEUE_CONCURRENT means concurrent queue</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> serialQ = dispatch_queue_create(<span class="string">"name"</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>The iOS system offers two kinds of queues: main queue and global queue.</p><p>The global queue is a concurrent queue. It has no name. We can get it by:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> Q = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>The main queue is a serial queue. It is running on the main thread for UI updating. We can get it by:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> Q = dispatch_get_main_queue();</span><br></pre></td></tr></table></figure><p>It is good to know that queue is like object which has reference counting. When a task is added to a queue, this queue will be retained, and the count++. The memory will be released when all the tasks in this queue are executed. It is important to create a queue with strong type.</p><h2 id="SYNCHRONOUS-VS-ASYNCHRONOUS"><a href="#SYNCHRONOUS-VS-ASYNCHRONOUS" class="headerlink" title="SYNCHRONOUS VS. ASYNCHRONOUS"></a>SYNCHRONOUS VS. ASYNCHRONOUS</h2><p>These terms describe when a function will return control to the caller, and how much work will have been done by that point.</p><p>A synchronous function returns only after the completion of a task that it orders. No new thread and it will block current thread.</p><p>An asynchronous function, on the other hand, returns immediately, ordering the task to be done but not waiting for it. Thus, an asynchronous function does not block the current thread of execution from proceeding on to the next function. GCD will open a new thread if there are available threads. It will now block current thread. (Part from raywenderlich.com)</p><p>The functions to achieve Synchronous and Asynchronous execution:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* synchronous</span></span><br><span class="line"><span class="comment">perameter 1：the queue need to be executed</span></span><br><span class="line"><span class="comment">perameter 2：the block</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">dispatch_sync</span>(<span class="built_in">dispatch_queue_t</span> queue, dispatch_block_t block);</span><br><span class="line"><span class="comment">// asynchronous</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">dispatch_async</span>(<span class="built_in">dispatch_queue_t</span> queue, dispatch_block_t block);</span><br></pre></td></tr></table></figure><h2 id="FOUR-CASES"><a href="#FOUR-CASES" class="headerlink" title="FOUR CASES"></a>FOUR CASES</h2><p>There are two kinds of queues: serial queue and concurrent queue. And there are two kinds of execution. So 2 by 2, there are four cases. What is happening for each of them?</p><ol><li>Synchronously execute a serial queue: Synchronous means no new thread. So, it will execute the tasks one after preceding one in the current thread.</li><li>Asynchronously execute a serial queue: Asynchronous means new threads might be opened. But if GCD opened multiple threads, it can not guaranty that the tasks in the serial queue will be executed in FIFO order. So, only one thread will be opened.</li><li>Synchronously execute a concurrent queue: Synchronous means no new thread. So, just execute in order.</li><li>Asynchronously execute a concurrent queue: GCD will open multiple threads based on current condition, and take tasks out of the queue in order, but execute them in disorder.</li></ol><h2 id="DEADLOCK"><a href="#DEADLOCK" class="headerlink" title="DEADLOCK"></a>DEADLOCK</h2><p>Threads are said to be deadlocked if they all get stuck waiting for each other to complete or perform another action. The first can’t finish because it’s waiting for the second to finish. But the second can’t finish because it’s waiting for the first to finish. (From raywenderlich.com)</p><blockquote><p><strong>Remember! On a serial queue, never call dispatch_sync targeting the same queue!</strong></p></blockquote><p>For example, deadlock the main thread:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)mainThreadDeadLockTest &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"begin"</span>);</span><br><span class="line">    <span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"middle"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"end"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nslog print out:</span></span><br><span class="line"><span class="comment">// begin</span></span><br></pre></td></tr></table></figure><p>The main queue is a serial queue. The dispatch_sync will block current queue which is the main queue to run the code in the dispatch block. But here, in the dispatch_sync, we added a task to the main queue to execute. However, the main queue is already blocked. It can not execute the block. </p><p>Deadlock anther custom serial thread:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)deadLockTest &#123;</span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">"serial_queue"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(serialQueue, ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"begin"</span>);</span><br><span class="line">        <span class="built_in">dispatch_sync</span>(serialQueue, ^&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"middle"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"end"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"return"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nslog print out</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">begin</span><br></pre></td></tr></table></figure><p>The new serial queue is a deadlock, but it will not affect the main thread.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GCD is the short form of Grand Central Dispatch. To understand GCD, there are several concepts needed to be known.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/tags/iOS/"/>
    
      <category term="Objc" scheme="https://jasonhan1990.github.io/tags/Objc/"/>
    
      <category term="GCD" scheme="https://jasonhan1990.github.io/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>iOS Animation - Interact With Constraint In Code</title>
    <link href="https://jasonhan1990.github.io/2016/06/01/ios-animation-5/"/>
    <id>https://jasonhan1990.github.io/2016/06/01/ios-animation-5/</id>
    <published>2016-06-01T22:44:33.000Z</published>
    <updated>2018-09-21T00:20:42.621Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Learning notes for book iOS Animations by Tutorials.</p></blockquote><p>Auto layout is a powerful tool to create app interface. Developers can pre-set the constraints for a view. How to change a certain constraint to create animation?<br><a id="more"></a><br>Suppose we have a title label which lays on a menu UIView and looks like this.<br><div class="figure center" style="width:;"><a class="fancybox" href="c5-1.png" title="Title label on a UIView called menu view" data-caption="Title label on a UIView called menu view" data-fancybox="default"><img class="fig-img" src="c5-1.png" alt="Title label on a UIView called menu view"></a><span class="caption">Title label on a UIView called menu view</span></div><br>The constraints for Title Label are<br><div class="figure center" style="width:;"><a class="fancybox" href="c5-2.png" title="Constraints for Title Label" data-caption="Constraints for Title Label" data-fancybox="default"><img class="fig-img" src="c5-2.png" alt="Constraints for Title Label"></a><span class="caption">Constraints for Title Label</span></div><br>Now, I want to push the title label to the left by 100pt. I could add -100 constant to titleLabel.CenterX. There are multiple ways to do it.</p><ul><li>using outlets</li></ul><p>In ViewController.swift, add an IBOutlet which is a NSLayoutConstraint.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> labelCenterXConstraint: <span class="type">NSLayoutConstraint</span>!</span><br></pre></td></tr></table></figure><p>Then open the storyboard and link the correct constraint to the outlet.</p><div class="figure center" style="width:;"><a class="fancybox" href="c5-3.png" title="Right click the constraint, the drag new referencing outlet to view controller" data-caption="Right click the constraint, the drag new referencing outlet to view controller" data-fancybox="default"><img class="fig-img" src="c5-3.png" alt="Right click the constraint, the drag new referencing outlet to view controller"></a><span class="caption">Right click the constraint, the drag new referencing outlet to view controller</span></div><div class="figure center" style="width:;"><a class="fancybox" href="c5-4.png" title="click the right outlet for this constraint" data-caption="click the right outlet for this constraint" data-fancybox="default"><img class="fig-img" src="c5-4.png" alt="click the right outlet for this constraint"></a><span class="caption">click the right outlet for this constraint</span></div><p>Done! Now we can change the constraint using this outlet. The code is:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">labelCenterXConstraint.constant =-<span class="number">100.0</span></span><br></pre></td></tr></table></figure><ul><li>find the certain constraint in all superview’s constraints</li></ul><p>You can print out all the constraints for title label’s superview using this code:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> constraint <span class="keyword">in</span> titleLabel.superview!.constraints &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"-&gt; <span class="subst">\(constraint)</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And you will see something like this:<br><div class="figure center" style="width:;"><a class="fancybox" href="c5-5.png" title="" data-caption="" data-fancybox="default"><img class="fig-img" src="c5-5.png" alt=""></a></div></p><p>But how can we find the certain constraint we want?</p><p>First, let’s look deep into the constraint. By click the title label centerX constraint, you will see the details for this constraint in right tool bar.<br><div class="figure center" style="width:;"><a class="fancybox" href="c5-6.png" title="" data-caption="" data-fancybox="default"><img class="fig-img" src="c5-6.png" alt=""></a></div></p><p>You can see that a constraint has several properties such as First Item, Relation, Second Item, Constant and so on. And in First item, the Center X is the attribute of title label.</p><p>The Attributes inspector is laid out to present constraint information in a way that reflects a linear equation, such as the following for an equality relation:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FirstItem</span>.<span class="type">Attribute1</span> = (<span class="type">SecondItem</span>.<span class="type">Attribute2</span> * <span class="type">Multiplier</span>) + <span class="type">Constant</span></span><br></pre></td></tr></table></figure><p>So, for here is:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titleLabel.<span class="type">CenterX</span> = (<span class="type">Superview</span>.<span class="type">CenterX</span> * <span class="number">1</span>) + <span class="number">0.0</span></span><br></pre></td></tr></table></figure><p>Back to how to change the constraint. To identify the title label centerX constraint, we need to identify the FirstItem which is titleLabel and its attribute which is CenterX. The code is:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> constraint <span class="keyword">in</span> titleLabel.superview!.constraints &#123;</span><br><span class="line">    <span class="keyword">if</span> constraint.firstItem <span class="keyword">as</span>? <span class="type">NSObject</span> == titleLabel &amp;&amp; constraint.firstAttribute == .<span class="type">CenterX</span> &#123;</span><br><span class="line">        constraint.constant = -<span class="number">100.0</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is an easier way. You can set identifier for a constraint.<br><div class="figure center" style="width:;"><a class="fancybox" href="c5-7.png" title="Set the identifier to TitleCenterX" data-caption="Set the identifier to TitleCenterX" data-fancybox="default"><img class="fig-img" src="c5-7.png" alt="Set the identifier to TitleCenterX"></a><span class="caption">Set the identifier to TitleCenterX</span></div><br>The code:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> constraint.identifier == <span class="string">"TitleCenterX"</span> &#123;</span><br><span class="line">    constraint.constant = -<span class="number">100.0</span></span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, we know how to change the constraint by code. How to create animation?</p><p>Well, after you changed the constraints, you need to update them by calling:</p><p><code>layoutIfNeeded()</code></p><p>If you hadn’t called layoutIfNeeded(), UIKit would have performed a layout anyway since you changed the constraints, but which marked the layout as dirty.</p><p>You can put layoutIfNeeded() into an animation closure to make animation. For example:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// change label centerX's constant</span></span><br><span class="line">labelCenterXConstraint.constant = -<span class="number">100.0</span></span><br><span class="line"><span class="comment">// then, update the layout</span></span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">0.5</span>, delay: <span class="number">0.0</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.view.layoutIfNeeded()</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>The original post is on Jun 1, 2016.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Learning notes for book iOS Animations by Tutorials.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Auto layout is a powerful tool to create app interface. Developers can pre-set the constraints for a view. How to change a certain constraint to create animation?&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/categories/iOS/"/>
    
    
      <category term="iOS Animation" scheme="https://jasonhan1990.github.io/tags/iOS-Animation/"/>
    
      <category term="Swift" scheme="https://jasonhan1990.github.io/tags/Swift/"/>
    
      <category term="Auto Layout" scheme="https://jasonhan1990.github.io/tags/Auto-Layout/"/>
    
  </entry>
  
  <entry>
    <title>iOS Animation - Understanding UIView.Keyframe</title>
    <link href="https://jasonhan1990.github.io/2016/05/26/ios-animation-4/"/>
    <id>https://jasonhan1990.github.io/2016/05/26/ios-animation-4/</id>
    <published>2016-05-26T22:03:53.000Z</published>
    <updated>2018-09-21T00:21:20.137Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Learning notes for book iOS Animations by Tutorials.</p></blockquote><p>When a view has several stages of moving animation, it is complicated to use animateWithDuration to implement the animation because it will contain nasty nesting in your code.<br><a id="more"></a><br>However, Keyframe animation can solve the problem in an easy way. In UIView, there are two methods. </p><ul><li><code>animateKeyframesWithDuration:delay:options:animations:completion:</code></li><li><code>addKeyframeWithRelativeStartTime:relativeDuration:animations:</code></li></ul><p>The first one creates an animation block object that can be used to set up keyframe-based animations for the current view. Well, the second one specifies the timing and animation values for a single frame of a keyframe animation.</p><p>The parameters in animateKeyframesWithDuration are easy to understand, but the parameters in addKeyframeWithRelativeStartTime are needed to take carefully.<br>In addKeyframeWithRelativeStartTime:</p><ul><li><p><code>frameStartTime:</code> The time at which to start the specified animations. This value must be in the range 0 to 1. The value is the percentage of the total duration time. If the total duration is 2 sec and the frameStartTime is 0.5, then the real starting time is at 1 sec.</p></li><li><p><code>frameDuration:</code> The length of time over which to animate to the specified value. This value must be in the range 0 to 1. The value is the percentage of the total duration time. If the total duration is 10 sec and the frameDuration is 0.25, then the real duration of this animation stage is 2.5 sec.</p></li></ul><p>Okey, let try to do this animation using keyframe animation.<br><div class="figure center" style="width:;"><a class="fancybox" href="c4-1.gif" title="Image-1" data-caption="Image-1" data-fancybox="default"><img class="fig-img" src="c4-1.gif" alt="Image-1"></a><span class="caption">Image-1</span></div><br>The stages of the moon rising and falling look like this:<br><div class="figure center" style="width:;"><a class="fancybox" href="c4-2.jpeg" title="Image-2" data-caption="Image-2" data-fancybox="default"><img class="fig-img" src="c4-2.jpeg" alt="Image-2"></a><span class="caption">Image-2</span></div><br>I used four stages. On X-axis, each stage moving length for the moon is identical which is a quarter of superview.width. On Y-axis, the moon climbs higher at the beginning of rising which means moon.y will minus a larger number in the first stage than in the second stage. For falling, it is the opposite of rising. To make the moon move smoothly, I choose CalculationModeCubic for the keyframe animation option.</p><p>Here is the code:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">moon.alpha = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="type">UIView</span>.animateKeyframesWithDuration(<span class="number">5</span>, delay: <span class="number">0.0</span>, options: [.<span class="type">CalculationModeCubic</span>, .<span class="type">Repeat</span>], animations: &#123;</span><br><span class="line">    <span class="type">UIView</span>.addKeyframeWithRelativeStartTime(<span class="number">0.0</span>, relativeDuration: <span class="number">0.25</span>, animations: &#123;</span><br><span class="line">        <span class="keyword">self</span>.moon.alpha = <span class="number">0.5</span></span><br><span class="line">        <span class="keyword">self</span>.moon.center.x += <span class="keyword">self</span>.view.frame.size.width / <span class="number">4.0</span></span><br><span class="line">        <span class="keyword">self</span>.moon.center.y -= <span class="number">80</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="type">UIView</span>.addKeyframeWithRelativeStartTime(<span class="number">0.25</span>, relativeDuration: <span class="number">0.25</span>, animations: &#123;</span><br><span class="line">        <span class="keyword">self</span>.moon.alpha = <span class="number">1.0</span></span><br><span class="line">        <span class="keyword">self</span>.moon.center.x += <span class="keyword">self</span>.view.frame.size.width / <span class="number">4.0</span></span><br><span class="line">        <span class="keyword">self</span>.moon.center.y -= <span class="number">20</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="type">UIView</span>.addKeyframeWithRelativeStartTime(<span class="number">0.5</span>, relativeDuration: <span class="number">0.25</span>, animations: &#123;</span><br><span class="line">        <span class="keyword">self</span>.moon.center.x += <span class="keyword">self</span>.view.frame.size.width / <span class="number">4.0</span></span><br><span class="line">        <span class="keyword">self</span>.moon.center.y += <span class="number">20</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="type">UIView</span>.addKeyframeWithRelativeStartTime(<span class="number">0.75</span>, relativeDuration: <span class="number">0.25</span>, animations: &#123;</span><br><span class="line">        <span class="keyword">self</span>.moon.alpha = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">self</span>.moon.center.x += <span class="keyword">self</span>.view.frame.size.width / <span class="number">4.0</span></span><br><span class="line">        <span class="keyword">self</span>.moon.center.y += <span class="number">80</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Learning notes for book iOS Animations by Tutorials.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When a view has several stages of moving animation, it is complicated to use animateWithDuration to implement the animation because it will contain nasty nesting in your code.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/categories/iOS/"/>
    
    
      <category term="iOS Animation" scheme="https://jasonhan1990.github.io/tags/iOS-Animation/"/>
    
      <category term="Swift" scheme="https://jasonhan1990.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS Animation - Understanding Transform</title>
    <link href="https://jasonhan1990.github.io/2016/05/25/ios-animation-3/"/>
    <id>https://jasonhan1990.github.io/2016/05/25/ios-animation-3/</id>
    <published>2016-05-25T23:31:01.000Z</published>
    <updated>2018-09-21T00:21:37.019Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Learning notes for book iOS Animations by Tutorials.</p></blockquote><p>The UIView transform property is of type CGAffineTransform, and is used to represent a two-dimensional rotation, scale, or translation. By changing it, you can rotate, scale or translate a view.<br><a id="more"></a><br>You can create a CGAffineTransform by these methods: </p><ul><li><code>CGAffineTransformMakeRotation(CGFloat angle)</code></li><li><code>CGAffineTransformMakeScale(CGFloat sx, CGFloat sy)</code></li><li><code>CGAffineTransformMakeTranslation(CGFloat tx, CGFloat ty)</code></li></ul><p>The rotation and scale transforms are fairly self-explanatory—they rotate and scale a vector respectively. A translation transform just adds the specified x and y values to the vector—so if the vector represents a point, it moves the point.</p><p>You can combine new transform to an existing CGAffineTransform by using these methods:</p><ul><li><code>CGAffineTransformRotate(CGAffineTransform t, CGFloat angle)</code></li><li><code>CGAffineTransformScale(CGAffineTransform t, CGFloat sx, CGFloat sy)</code></li><li><code>CGAffineTransformTranslate(CGAffineTransform t, CGFloat tx, CGFloat ty)</code></li></ul><p>or you can combine two existing CGAffineTransform into one by using:</p><ul><li><code>CGAffineTransformConcat(CGAffineTransform t1, CGAffineTransform t2);</code></li></ul><p>Let’s see how to do a cube transition with CGAffineTransform.<br><div class="figure center" style="width:;"><a class="fancybox" href="c3-1.gif" title="Image-1" data-caption="Image-1" data-fancybox="default"><img class="fig-img" src="c3-1.gif" alt="Image-1"></a><span class="caption">Image-1</span></div><br>Look at the image. It looks like a cube that rotates around its center to reveal the next message on its sides. In fact, there are only two labels. One is login page and another is signup page. Let’s break it down. Now we only take care of login page label. It looks like this:<br><div class="figure center" style="width:;"><a class="fancybox" href="c3-2.gif" title="Image-2" data-caption="Image-2" data-fancybox="default"><img class="fig-img" src="c3-2.gif" alt="Image-2"></a><span class="caption">Image-2</span></div><br>It is obvious that we scale the label on its Y-axis. So let’s scale it by using the following code:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signInLbl.transform = <span class="type">CGAffineTransformMakeScale</span>(<span class="number">1.0</span>, <span class="number">0.05</span>)</span><br></pre></td></tr></table></figure><p>As you can see, it scales the label on Y-axis from 1.0 to 0.05 (1.0 is the default). Let’s see the result:<br><div class="figure center" style="width:;"><a class="fancybox" href="c3-3.gif" title="Image-3" data-caption="Image-3" data-fancybox="default"><img class="fig-img" src="c3-3.gif" alt="Image-3"></a><span class="caption">Image-3</span></div><br>Well, looks like we still need do some thing. Here, the label just shrinks to the middle of Y-axis. Compared with our goal, it seems like that we need to move the shrinking destination down by half of label’s height. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newLabelOffset = <span class="keyword">self</span>.heading.frame.size.height / <span class="number">2.0</span></span><br><span class="line"><span class="type">CGAffineTransformMakeTranslation</span>(<span class="number">0.0</span>, newLabelOffset)</span><br></pre></td></tr></table></figure><p>Here I didn’t write down “signInLbl.transform =”, because we can’t separately do the transforms. What we need is to combine the two CGAffineTransforms:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signInLbl.transform = <span class="type">CGAffineTransformConcat</span>(<span class="type">CGAffineTransformMakeScale</span>(<span class="number">1.0</span>, <span class="number">0.05</span>), <span class="type">CGAffineTransformMakeTranslation</span>(<span class="number">0.0</span>, newLabelOffset))</span><br></pre></td></tr></table></figure><p>Now, We can get what we want for login page label.<br>The order of the transformations really matters the final results. If you change the sequence of scale and translate, you will get different results. The reason for this is that when you apply transforms sequentially in this way, the previous transforms affect the subsequent ones.<br>Let move on signup page label. It is easy now. The animation for signup page label is really like the reverse of signin page label animation. We first set its transform to:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signUpLbl.transform = <span class="type">CGAffineTransformConcat</span>(<span class="type">CGAffineTransformMakeScale</span>(<span class="number">1.0</span>, <span class="number">0.05</span>), <span class="type">CGAffineTransformMakeTranslation</span>(<span class="number">0.0</span>, -newLabelOffset))</span><br></pre></td></tr></table></figure><p>And then set it back to normal. What is normal? Apple offered us a transform: CGAffineTransformIdentity. It is like the identity matrix in linear algebra. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signUpLbl.transform = <span class="type">CGAffineTransformIdentity</span></span><br></pre></td></tr></table></figure><p>Okey, here is the full codes:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeHeadingText</span><span class="params">(label label: UILabel)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> label.text == <span class="string">"Login Page"</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.cubeTrasition(label: label, toText: <span class="string">"Signup Page"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.cubeTrasition(label: label, toText: <span class="string">"Signin Page"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cubeTrasition</span><span class="params">(label label: UILabel, toText: String)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> newLabel = <span class="type">UILabel</span>(frame: label.frame)</span><br><span class="line">    newLabel.text = toText</span><br><span class="line">    newLabel.font = label.font</span><br><span class="line">    newLabel.textAlignment = label.textAlignment</span><br><span class="line">    newLabel.textColor = label.textColor</span><br><span class="line">    newLabel.backgroundColor = <span class="type">UIColor</span>.clearColor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> newLabelOffset = label.frame.size.height / <span class="number">2.0</span></span><br><span class="line">    newLabel.transform = <span class="type">CGAffineTransformConcat</span>(</span><br><span class="line">    <span class="type">CGAffineTransformMakeScale</span>(<span class="number">1.0</span>, <span class="number">0.05</span>), <span class="type">CGAffineTransformMakeTranslation</span>(<span class="number">0.0</span>, -newLabelOffset))</span><br><span class="line"></span><br><span class="line">    label.superview!.addSubview(newLabel)</span><br><span class="line"> </span><br><span class="line">    <span class="type">UIView</span>.animateWithDuration(<span class="number">0.5</span>, delay: <span class="number">0.0</span>, options: .<span class="type">CurveEaseOut</span>, animations: &#123; </span><br><span class="line">        newLabel.transform = <span class="type">CGAffineTransformIdentity</span></span><br><span class="line">        label.transform = <span class="type">CGAffineTransformConcat</span>(<span class="type">CGAffineTransformMakeScale</span>(<span class="number">1.0</span>, <span class="number">0.05</span>), <span class="type">CGAffineTransformMakeTranslation</span>(<span class="number">0.0</span>, newLabelOffset))</span><br><span class="line">    &#125;, completion: &#123;<span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">        label.text = newLabel.text;</span><br><span class="line">        label.transform = <span class="type">CGAffineTransformIdentity</span></span><br><span class="line">        newLabel.removeFromSuperview()</span><br><span class="line">        <span class="keyword">self</span>.changeHeadingText(label: <span class="keyword">self</span>.heading)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Learning notes for book iOS Animations by Tutorials.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The UIView transform property is of type CGAffineTransform, and is used to represent a two-dimensional rotation, scale, or translation. By changing it, you can rotate, scale or translate a view.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/categories/iOS/"/>
    
    
      <category term="iOS Animation" scheme="https://jasonhan1990.github.io/tags/iOS-Animation/"/>
    
      <category term="Swift" scheme="https://jasonhan1990.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS Animation - UIView.TransitionWithView</title>
    <link href="https://jasonhan1990.github.io/2016/05/25/ios-animation-2/"/>
    <id>https://jasonhan1990.github.io/2016/05/25/ios-animation-2/</id>
    <published>2016-05-25T23:07:20.000Z</published>
    <updated>2018-09-21T00:21:55.201Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Learning notes for book iOS Animations by Tutorials.</p></blockquote><p>First, what is the difference between <code>transitionWithView</code> and <code>animationWithDuration</code>?<br><a id="more"></a><code>animateWithDuration</code> animates a UIView through changing its properties, whereas <code>transitionWithView</code> allows you to apply a transition to the specified view so that you can make state changes to it, such as add, remove, hide, show and replace one view with another view.</p><p>Then, here is an example. We added a hidden logging status view to the root view. After clicked the Login button, we show the status view. After 1.5 seconds, we hide the status view and refresh to the next status.<br><div class="figure center" style="width:;"><a class="fancybox" href="C3.gif" title="Image-1" data-caption="Image-1" data-fancybox="default"><img class="fig-img" src="C3.gif" alt="Image-1"></a><span class="caption">Image-1</span></div><br>The code looks like this:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">showMessage() &#123;</span><br><span class="line">    <span class="type">UIView</span>.transitionWithView(status, duration: <span class="number">0.33</span>, options: [.<span class="type">CurveEaseOut</span>, .<span class="type">TransitionCurlDown</span>], animations: &#123;</span><br><span class="line">        <span class="keyword">self</span>.status.hidden = <span class="literal">false</span></span><br><span class="line">    &#125;, completion: &#123;<span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">        delay(seconds: <span class="number">1.5</span>, completion: &#123;</span><br><span class="line">            <span class="keyword">self</span>.removeMessage()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">removeMessage() &#123;</span><br><span class="line">    <span class="type">UIView</span>.animateWithDuration(<span class="number">0.33</span>, delay: <span class="number">0.0</span>, options: [], animations: &#123; </span><br><span class="line">        <span class="keyword">self</span>.status.center.x += <span class="keyword">self</span>.view.frame.size.width</span><br><span class="line">    &#125;, completion: &#123;<span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">self</span>.status.hidden = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">self</span>.showNextMessage()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The first parameter in <code>transitionWithView()</code> is the container view that performs the transition (Here is the status view). The rest of parameters are quite similar to the <code>animateWithDuration()</code>.</p><p>Transition option:</p><ul><li>.TransitionFlipFromLeft</li><li>.TransitionFlipFromRight</li><li>.TransitionCurlUp</li><li>.TransitionCurlDown</li><li>.TransitionCrossDissolve</li><li>.TransitionFlipFromTop</li><li>.TransitionFlipFromBottom</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Learning notes for book iOS Animations by Tutorials.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First, what is the difference between &lt;code&gt;transitionWithView&lt;/code&gt; and &lt;code&gt;animationWithDuration&lt;/code&gt;?&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/categories/iOS/"/>
    
    
      <category term="iOS Animation" scheme="https://jasonhan1990.github.io/tags/iOS-Animation/"/>
    
      <category term="Swift" scheme="https://jasonhan1990.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS Animation - UIView.AnimationWithDurarion</title>
    <link href="https://jasonhan1990.github.io/2016/05/24/IOS-ANIMATION-1/"/>
    <id>https://jasonhan1990.github.io/2016/05/24/IOS-ANIMATION-1/</id>
    <published>2016-05-24T19:36:26.000Z</published>
    <updated>2018-09-21T00:22:13.679Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Learning notes for book iOS Animations by Tutorials.</p></blockquote><p>Logging page is very common in your mobile apps today. A fancy logging page will catch people’s eyes at the very beginning. Let’s do it.<br><a id="more"></a><br><strong>Shifting and Fade in:</strong><br><div class="figure center" style="width:;"><a class="fancybox" href="C1.gif" title="Image-1" data-caption="Image-1" data-fancybox="default"><img class="fig-img" src="C1.gif" alt="Image-1"></a><span class="caption">Image-1</span></div><br>The view contains: </p><ul><li>A heading Label shows login page</li><li>A Username textField</li><li>A Password textField</li><li>A Login button</li></ul><p>The animation shows that the label comes from left to right first, then follow by the username textField, and then follow by the password textField. The log in button starts to fade in when the password textField starts to come in. The password textField and the login button finish their animation at the same time.</p><p>So, what we need to do first is to hide all the components before view starts to appear. In <code>viewWillAppear()</code>, we do:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// move the following components out of the screen </span></span><br><span class="line">heading.center.x -= view.bounds.width</span><br><span class="line">username.center.x -= view.bounds.width</span><br><span class="line">password.center.x -= veiw.bounds.width</span><br><span class="line"><span class="comment">// set login button transparent</span></span><br><span class="line">loginButton.alpha = <span class="number">0.0</span></span><br></pre></td></tr></table></figure><p>After we done in <code>viewWillAppear()</code>, we start to write down the animation code in <code>viewDidAppear()</code>, which will show animation before the view fully loaded. Here we will use UIView class method “animateWithDuration”. In <code>viewDidAppear()</code>, we do:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.heading.center.x += <span class="keyword">self</span>.view.bounds.width;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.4</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.username.center.x += <span class="keyword">self</span>.view.bounds.width;</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.8</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.password.center.x += <span class="keyword">self</span>.view.bounds.width;</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.8</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.loginButton.alpha += <span class="number">1.0</span></span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure></p><p>In the class method, it has some parameters to let you customize your animation:</p><ul><li>duration: The duration of the animation.</li><li>delay: A number of seconds UIKit will wait before it starts the animation.</li><li>option: A set of animation options allowing you to customize a number of aspects of your animation. (Default: CurveEaseInOut)</li><li>animation: The closure expression to provide your animation.</li><li>completion: The code needs to be executed after the animation completes. It could be nil.</li></ul><p><strong>Spring</strong><br><div class="figure center" style="width:;"><a class="fancybox" href="C2.gif" title="Image-2" data-caption="Image-2" data-fancybox="default"><img class="fig-img" src="C2.gif" alt="Image-2"></a><span class="caption">Image-2</span></div><br>Spring is easy. We still use the same class method from UIView animateWithDuration but with different parameters. Codes in <code>viewDidAppear()</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.4</span>, usingSpringWithDamping: <span class="number">0.7</span>, initialSpringVelocity: <span class="number">0.0</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.username.center.x += <span class="keyword">self</span>.view.bounds.width;</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.4</span>, usingSpringWithDamping: <span class="number">0.7</span>, initialSpringVelocity: <span class="number">0.0</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.password.center.x += <span class="keyword">self</span>.view.bounds.width;</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.4</span>, usingSpringWithDamping: <span class="number">0.4</span>, initialSpringVelocity: <span class="number">0.0</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.loginButton.center.y += <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">self</span>.loginButton.bounds.size.width += <span class="number">30</span></span><br><span class="line">    <span class="keyword">self</span>.loginButton.alpha += <span class="number">1</span>;</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>The new parameters are:</p><ol><li>usingSpringWithDamping: You can think of this value as the “stiffness” of the spring.</li><li>initialSpringVelocity: This controls the initial velocity of the animation.</li></ol><p>The method animateWithDuration allows you to animate the following properties of a UIView:</p><ul><li>frame</li><li>bounds</li><li>center</li><li>transform</li><li>alpha</li><li>background</li><li>contentStretch</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Learning notes for book iOS Animations by Tutorials.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Logging page is very common in your mobile apps today. A fancy logging page will catch people’s eyes at the very beginning. Let’s do it.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://jasonhan1990.github.io/categories/iOS/"/>
    
    
      <category term="iOS Animation" scheme="https://jasonhan1990.github.io/tags/iOS-Animation/"/>
    
      <category term="Swift" scheme="https://jasonhan1990.github.io/tags/Swift/"/>
    
  </entry>
  
</feed>
